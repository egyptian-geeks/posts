---
message: "Question Title : \"From Your Experience Perspective\" Which Database is
  the best choice for large data volume.\n\nProblem Info   : \n                 -
  We are about to start a new project which in the future should have a massive large
  database, Millions of recordes\n                 - SQL Server Can Handel this scenario
  in appropriate way ?\n                 - Actually We are hesitated in our Decision
  \n\nConsecrations : \n                - We will use  ( .Net WebApi ) For The Data
  Interactions.\n                - Data Will be ( On premise  ) in the organisation
  Servers (No Payed Cloud).\n                - We will Execute a Complex Data Operations
  ( Query , Insertion , Data Analysis , etc ..) \n\n#NoSQL #SQL #BigData #mongodb
  #SqlServer"
from:
  name: Mohamed Nady
  id: '10155293228608733'
type: status
created_time: '2016-08-11T11:34:14+0000'
updated_time: '2016-08-12T07:51:15+0000'
permalink_url: https://www.facebook.com/groups/egyptian.geeks/permalink/1201387543234285/
id: '172338516139198_1201387543234285'
reactions:
  data:
  - id: '10155764645725568'
    name: Mohamed Rashed
    type: LIKE
  - id: '1785295468160956'
    name: Mohamed Abdelrahman
    type: LIKE
  - id: '10156548320540656'
    name: Mohammad Zekrallah
    type: LIKE
  paging:
    cursors:
      before: TnpReU1qSTFOVFkzT2pFME56QTVNek15TlRZANk1qVTBNRGsyTVRZAeE13PT0ZD
      after: TlRJME1qY3dOalUxT2pFME56QTVNakkxT0RFNk1qVTBNRGsyTVRZAeE13PT0ZD
comments:
  data:
  - created_time: '2016-08-11T11:36:07+0000'
    from:
      name: Mohamed Nady
      id: '10155293228608733'
    message: Mohamed Bakr Mohamed Rashed Amr Badawy Meligy Mohamed Mohammad Zekrallah
      Amro Ali
    id: '1201388629900843'
  - created_time: '2016-08-11T11:36:23+0000'
    from:
      name: Mahmoud Mortda
      id: '1816374988414963'
    message: It depends on many factors, you cannot think in this way
    id: '1201388766567496'
  - created_time: '2016-08-11T11:59:34+0000'
    from:
      name: Mohamed Rashed
      id: '10155764645725568'
    message: |-
      Based on your experience ... I think SQL Server can handle, also you can think in hybrid solutions, Mixing between SQL Server & any NoSQL database.
      for REST Services check also ServiceStack, you can ask M Mohammad Zekrallah
    id: '1201402693232770'
  - created_time: '2016-08-11T12:54:22+0000'
    from:
      name: Said Bakr
      id: '10155965038378745'
    message: What about transactions?
    id: '1201433353229704'
  - created_time: '2016-08-11T14:27:47+0000'
    from:
      name: Hossam Almahy
      id: '10159992013645165'
    message: |-
      depends on:
      data types
      queries analysis
    id: '1201485133224526'
  - created_time: '2016-08-11T14:32:39+0000'
    from:
      name: Hossam Almahy
      id: '10159992013645165'
    message: |-
      checkout :-
      neo4j
      redis
    id: '1201488133224226'
  - created_time: '2016-08-11T14:35:30+0000'
    from:
      name: Muhammad Negm
      id: '10215093583796418'
    message: |-
      Don't go any way near SQL, relational database was made when disk space was expensive.
      I'd suggest to go with cassandra or Hbase or MongoDB
    id: '1201489406557432'
  - created_time: '2016-08-11T15:50:58+0000'
    from:
      name: Sam Hijazi
      id: '2114878395409155'
    message: |-
      It depends on what you need exactly . And your resources ..
      But if you want an easy way to Manage big number of records
      I would suggest using FILEMAKER 15.
    id: '1201536406552732'
  - created_time: '2016-08-11T16:18:09+0000'
    from:
      name: Mohamed Elsherif
      id: '10160105091405314'
    message: Don't optimize prematurely, you can't tell the future, start simple and
      optimize based on your calculated bottleneck, it is almost impossible to predict
      a bottleneck years in advance, and it is easy to add complexity in the wrong
      place which will make any future optimizations far more complex.
    id: '1201551926551180'
  - created_time: '2016-08-11T20:05:37+0000'
    from:
      name: Mohammad Fouad
      id: '10155755444625845'
    message: "NoSQL is cool, but do not follow the hype too early.\n\nI would initially
      use SQL for every single thing except the following:\n- caching and user sessions,
      and you are too early to need caching anyways\n- Message Queues, if your code
      needs to pass messages and events around a lot\n- Documents and Files and Assets,
      SQL should not be used to Store Binary data or JSON or XML, this is why S3 and
      ObjectStorage is for.\n- Standalone tables, if the table does not make sense
      to have any relationship (like if you are storing Emails, or )\n\nThese are
      the most annoying problems that SQL should not handle.\n\nEvery single startup
      out there, including Uber, Facebook started with an RDBMS, then now they are
      writing their own Engines just to optimize for their use cases. \n\nI certainly
      cant see any point in using Mongo or HBase to store Orders or Invoices!!"
    id: '1201683123204727'
  - created_time: '2016-08-11T20:11:44+0000'
    from:
      name: Mohammad Fouad
      id: '10155755444625845'
    message: "One main point that does not come intuitively until you see it in the
      wild, is that: \n\"It is totally OK if you use 2 different databases in the
      same application\"\n\nFor example, Gmail could use SQL to store User Accounts,
      and BigTable to store their Emails\n\nLast.fm Recommendation system uses PostgreSQL
      to store the songs and artists and genres, because these do not change alot.
      and then use some Hadoop to store the actual listening habits.\nSo they use
      SQL for the part that does not change often but is queried a lot, and then,
      NoSQL for the part that is massively distributed and requires alot of Writes
      and analysis."
    id: '1201686009871105'
  - created_time: '2016-08-11T23:44:56+0000'
    from:
      name: Meligy
      id: '10155880569740170'
    message: |-
      Can SQL Server handle millions of records?
      Yes
    id: '1201785093194530'
  - created_time: '2016-08-12T00:19:31+0000'
    from:
      name: Usama Fayez
      id: '10155807421830280'
    message: Like everyone else said, unless you're going to design a system where
      the latency (measured in the order of milliseconds) is a factor, don't over-engineer
      your solution. Start with a simple design (A relational db should work). Later
      on, if you really need to, you can always migrate your data to a new system
      or add caching to improve performance.
    id: '1201820156524357'
  - created_time: '2016-08-12T01:18:33+0000'
    from:
      name: Ahmad Hisham
      id: '10159889607765058'
    message: |-
      For the simple question of whether SQL Server can handle big databases, yes SQL Server can handle a Terabyte database since 1997 with the correct design/hardware.
      The more important question is  this "Is SQL Server the appropriate database for my App design and requirements or not"
    id: '1201844683188571'
  - created_time: '2016-08-12T07:51:08+0000'
    from:
      name: Ibraheem Osama
      id: '10155206310513093'
    message: "Read this article about Document DB problems not only mongo as mentioned
      in the article\n :) it will help you a lot. Go for SQL Server for simplicity
      and as most of geeks mentioned it can handle millions.\nTry to measure the number
      of concurrent connections on your system because it affects any database engine
      :) \nDon't go for a hybrid approach unless there is a valid point for it.\nTo
      improve the analytics performance create a data warehouse Database.\nOf course
      Asp.net can do the job  \n\nhttp://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/"
    id: '1202026049837101'
  paging:
    cursors:
      before: WTI5dGJXVnVkRjlqZAFhKemIzSTZANVEl3TVRNNE9EWXlPVGt3TURnME16b3hORGN3T1RFMU16WTMZD
      after: WTI5dGJXVnVkRjlqZAFhKemIzSTZANVEl3TWpBeU5qQTBPVGd6TnpFd01Ub3hORGN3T1RnNE1qWTUZD
