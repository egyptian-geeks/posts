---
message: Do I somehow need "LinkedList" data structure in a high level language like
  Javascript?
from:
  name: Osama Soliman
  id: '879271768900112'
type: status
created_time: '2017-07-09T22:09:57+0000'
updated_time: '2017-08-28T07:18:22+0000'
permalink_url: https://www.facebook.com/groups/egyptian.geeks/permalink/1542637029109333/
id: '172338516139198_1542637029109333'
reactions:
  data:
  - id: '1999765416908747'
    name: Ahmed Khalifa
    type: LIKE
  paging:
    cursors:
      before: TVRBd01EQTJNalU1TWpNNE9EVXlPakUwT1RrMk16ZA3pNREU2TWpVME1EazJNVFl4TXc9PQZDZD
      after: TVRBd01EQTJNalU1TWpNNE9EVXlPakUwT1RrMk16ZA3pNREU2TWpVME1EazJNVFl4TXc9PQZDZD
comments:
  data:
  - created_time: '2017-07-09T22:15:47+0000'
    from:
      name: Ahmed Khalifa
      id: '1999765416908747'
    message: بيعتمد بمعني اصح علي حسب انت عايز تعمل ايه.. عموما من اهم مميزاتها انك
      o(n) بتاعها دايما بيكون بواحد لاي عمليه insertion لاي iteam في اي مكان لانك
      مبتعملش shift.. من عيوبها ان ال access operation بتكون o(n) = n
    id: '1542642629108773'
  - created_time: '2017-07-09T22:16:35+0000'
    from:
      name: Naggar
      id: '2069499223273223'
    message: |-
      it depends on the case in hand..
      for example:
      using a linkedList data structure would be beneficial in a case where you need to do a lot of insert/remove of data from different locations (indexes) of a list ... would be much faster than a regular array
    id: '1542643099108726'
  - created_time: '2017-07-09T22:23:42+0000'
    from:
      name: Mohamed Elsherif
      id: '10160105091405314'
    message: You may need it, depends on what you are trying to do, the language itself
      doesn't make data structures obsolete.
    id: '1542646435775059'
  - created_time: '2017-07-09T22:27:54+0000'
    from:
      name: Osama Soliman
      id: '879271768900112'
    message: "انا عدت التفكير في الموضوع ولقيت اني ممكن استخدمها لو بعمل ابلكيشن بيقول
      تخلص ازاي مصلحة حكومية في مصر \U0001F602 كل حد تروحله هيشاور على التاني ...
      لحد اما ربنا يكتب الفرج وتخلص \U0001F609"
    id: '1542648799108156'
  - created_time: '2017-07-10T00:04:05+0000'
    from:
      name: Momen Al Zalabany
      id: '10160388991030144'
    message: |-
      linkedlist is a plain JS object, after all if you look close .
      they should give fast read and write at O(1), you can in a plain js object obtain that `obj[prop]`, they are dynamic in size also.. only missing .next head and tail thing u can utilize js prototypical inheritance to add that and here u go :)
    id: '1542708729102163'
  - created_time: '2017-07-10T00:37:31+0000'
    from:
      name: Mohammed Gamal
      id: '10156278338768296'
    message: |-
      Do you pine for the days when men were men and knew their data structures?

      https://news.ycombinator.com/item?id=420356
    id: '1542733695766333'
  - created_time: '2017-07-10T01:55:51+0000'
    from:
      name: Ahmed Atef
      id: '10215057553296111'
    message: Actually you might be using it we anta msh 3aref. For example in pagination,
      the next pointer yo3tbr byshawr 3ala el next node. Experience with data structures
      might not have a direct effect or usage, bas you will be using the concepts
      unconsciously.
    id: '1542779132428456'
  - created_time: '2017-07-10T04:38:00+0000'
    from:
      name: Ibraheem Mamdouh
      id: '1585678844802653'
    message: لو هتعمل مثلا  queue وعايز ال  operations كلها تبقي( O(1 ممكن تستخدم
      linked list
    id: '1542878475751855'
  - created_time: '2017-08-28T07:18:20+0000'
    from:
      name: Mohamed Shaaban
      id: '10156259295924301'
    message: |-
      I was reading "cracking the coding interview 6th edition" book, there was a design problem asking you to build a caching system, and the solution provided by the book, which is good, is using Linkedlist to keep the fresh recently requested object at head, and drop the stale objects easily

      So if you are building it with nodejs, then yes
    id: '1591814730858229'
  paging:
    cursors:
      before: WTI5dGJXVnVkRjlqZAFhKemIzSTZANVFUwTWpZAME1qWXlPVEV3T0RjM016b3hORGs1TmpNNE5UUTQZD
      after: WTI5dGJXVnVkRjlqZAFhKemIzSTZANVFU1TVRneE5EY3pNRGcxT0RJeU9Ub3hOVEF6T1RBME56QXcZD
