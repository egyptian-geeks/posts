---
message: فى ناس فى مصر بتهتم بموضوع ال performance بشكل جد جداً, أحمد واحد منهم.
from:
  name: Mohammed El Sayed
  id: '10155880598025170'
type: status
created_time: '2015-10-14T17:49:15+0000'
updated_time: '2015-10-15T12:17:19+0000'
permalink_url: https://www.facebook.com/groups/egyptian.geeks/permalink/1019557454750629/
id: '172338516139198_1019557454750629'
reactions:
  data:
  - id: '2009722172682455'
    name: Ahmed Saa'd Elghareeb
    type: LIKE
  - id: '10155780654440395'
    name: Emad Aslan
    type: LIKE
  - id: '10208889127745778'
    name: Tarek Abdel Maqsoud
    type: LIKE
  - id: '1923113658002033'
    name: Ahmad Tolba
    type: LIKE
  - id: '1743826635639938'
    name: Adel Ewis
    type: LIKE
  - id: '10155114629021466'
    name: Professor Mina
    type: LIKE
  - id: '10213738834576763'
    name: Amjad Mashaal
    type: LIKE
  - id: '10156358805885288'
    name: Mahmoud Abd El-Fattah
    type: LIKE
  - id: '10155747348649733'
    name: Islam R Hefny
    type: LIKE
  - id: '10157578621854852'
    name: Hisham Ades
    type: LIKE
  - id: '10210328784807140'
    name: Ahmed Elsharkawy
    type: LIKE
  - id: '10215800137143118'
    name: Mohamed Elnagar
    type: LIKE
  - id: '10156575426331336'
    name: Amr Ali Tealeb
    type: LIKE
  - id: '762135870664322'
    name: Ahmed Eid
    type: LIKE
  - id: '2473377552887852'
    name: Shady Mohamed
    type: LIKE
  - id: '10156052502884860'
    name: Omar Essam
    type: LIKE
  - id: '10214796374519514'
    name: Islam AbdelMohaimen Hassan
    type: LIKE
  - id: '10155802654056014'
    name: Islam Azab
    type: LIKE
  - id: '10212826240185281'
    name: Mohamed Bassem
    type: LIKE
  - id: '1772542006152666'
    name: Mohamed AbuIssa
    type: LIKE
  - id: '1682828608423305'
    name: Ahmed Josef
    type: LIKE
  - id: '10214861141222529'
    name: Abdelrady Fcis
    type: LIKE
  - id: '1012026932279218'
    name: Ahmed Mohamed Abd El-Hamid
    type: LIKE
  - id: '10156115350739764'
    name: Mahmoud Tantawy
    type: LIKE
  - id: '1624177287670190'
    name: Yousef Al Kahky
    type: LIKE
  - id: '10215510264372429'
    name: Amr El Ramsisy
    type: LIKE
  - id: '10156113357791468'
    name: Kareem Elhösseny
    type: LIKE
  - id: '1955441501387657'
    name: Bassam Abd Elhamid
    type: LIKE
  - id: '1928384107425504'
    name: Ahmed Hashem
    type: LIKE
  - id: '10155010906817553'
    name: Ahmed Saeid
    type: LIKE
  - id: '10211720702355476'
    name: Abdelrhman Talat
    type: LIKE
  - id: '10211325385431402'
    name: Abdalla Zaki Al-Kateb
    type: LIKE
  paging:
    cursors:
      before: TVRBd01EQTVNelF3TnpVek5UVTRPakUwTkRRNU1qSXpNREk2TWpVME1EazJNVFl4TXc9PQZDZD
      after: TVRJMk16VTFPVFF3TnpveE5EUTBPRFExTVRJME9qSTFOREE1TmpFMk1UTT0ZD
comments:
  data:
  - created_time: '2015-10-14T18:07:37+0000'
    from:
      name: Mohammad Tayseer
      id: '10155970088481341'
    message: ٨ إيه؟ أنا باتكلم بجد! ولا ٨ ولا ٧ ولا حتي ٥ ميللي سكند! أنا مينفعنيش
      الكلام ده. هم ٢ ميللي سكند!
    id: '1019562924750082'
  - created_time: '2015-10-14T19:39:43+0000'
    from:
      name: Hady Mahmoud
      id: '10213443570697789'
    message: |-
      Not to undermine the effort but without a proper context and with only a "some website" it's hard to be impressed.

      8ms on a well configured unix system running a Golang (1.4+) stack serving C10k is quite achievable. Serving C10M is a different story.
      Erlang stacks running on bare metal can quite easily do μs.

      It'll also be helpful to discuss where the sink hole was, going from 300ms to 8ms is a ~97% improvement, so where in your stack was the bulk of that 300ms being spent? Also is this an end-to-end average per request or the average is measured just after your reverse proxy (if you're using one) hands over the request to your web app's process, in such case you should clarify this.

      All in all, I'm sure it's an accomplishment so congrats for that but such a high % change is a pipe dream for a system handling millions of requests per minute. So without any proper context and background insights into the website's operational nature and the stack it's running on, it's hard to truly appreciate the level of improvement stated which is unfair to you.
    id: '1019597268079981'
  - created_time: '2015-10-14T20:27:13+0000'
    from:
      name: Ahmed Mozaly
      id: '10155321930231313'
    message: |-
      Hi Hady,
      * the "some website" is a one with 8 digits requests per month

      * the stack is ASP.NET MVC

      * the new revamp is almost ready but the numbers is tested with the same context of the live one

      * the 97% improvement reached after changing the flow of the data to a "nearly" one way direction, the custom in-memory caching engine and the background workers behind, are doing the hard work

      * this is an end-to-end SERVER response time measure, the 8 ms is not the new average YET, as I said, we just unlocked this level today (current average is about 20)
    id: '1019613011411740'
  paging:
    cursors:
      before: WTI5dGJXVnVkRjlqZAFhKemIzSTZANVEF4T1RVMk1qa3lORGMxTURBNE1qb3hORFEwT0RRMk1EVTQZD
      after: WTI5dGJXVnVkRjlqZAFhKemIzSTZANVEF4T1RZAeE16QXhNVFF4TVRjME1Eb3hORFEwT0RVME5ETTAZD
attachments:
  data:
  - description: "Got a mission to revamp a codebase powering some website with 300
      milliseconds average SERVER response time\nAfter months of work, we just unlocked
      the 8 milliseconds milestone :D\n--\nFor people want more details, we passed
      through these milestones inside an ASP.NET MVC website:\n.\n1- Database optimization,
      we used sp_whoisactive stored procedure and other tools to identity and fix
      slow sql queries\n.\n2- We started to use Dapper side-by-side with Entity Framework
      to help us have more control on queries we need to optimize manually \n.\n3-
      We built our own custom in-memory caching engine, at the heart it is powered
      by ConcurrentDictionary \n.\n4- We refactored the model layer to minimize the
      need for sql joins and lazy loading, inspired by document-oriented model from
      \ NoSql world\n.\n5- We moved the sync operations between our in-memory caching
      engine and the database to the background, thanks to Hangfire \n.\n6- We shoot
      down any RenderAction as we can, we prepare view model once, and use RenderPartial
      as much as we can \n.\n7- We used MiniProfiler all the way to measure server
      response time :D"
    media:
      image:
        height: 113
        src: https://scontent.xx.fbcdn.net/v/t1.0-9/11222253_10153245956331313_4936035492241518217_n.jpg?oh=1d17bc02f0271564868fe07bd0d1d367&oe=5AE5C37C
        width: 134
    target:
      url: https://www.facebook.com/photo.php?fbid=10153245956331313&set=p.10153245956331313&type=3
    type: photo
    url: https://www.facebook.com/photo.php?fbid=10153245956331313&set=p.10153245956331313&type=3
