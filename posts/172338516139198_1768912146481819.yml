---
message: "حبة software engineering بالهجايص(7): قانون ديميتر Law of Demeter\n--------\nاتكلم
  مع أصحابك بس، ما تتكلمش مع حد ما تعرفوش.\n-- جميع الأمهات 3>\n\nكان فيه مشروع برمجي
  اسمه مشروع ديميتر، الناس اللي شغالة فيه عملوا بعض القواعد للمبرمجين اللي شغالين
  على المشروع عشان يكتبوا كود OOP نضيف، و بعدين لقوا إن القواعد دي ينفع تعمم فنشروها
  بالاسم ده = قانون ديميتر Law Of Demeter. وديميتر دي إلهة النبات والطبيعة عند الإغريق.
  وطبعا دول ناس كفار مالناش دعوة بيهم، ومايهمناش دلوقتي ليه سموه بالاسم ده. اللي يهمنا
  الفكرة اللي وراه.\n\n* إيه الفكرة؟ \nلما بييجوا يشرحوا الفكرة بالهجايص كده بيقولوا
  نفس الكلام اللي أمك كانت بتقوله لك وأنت صغير: اتكلم مع أصحابك بس، ما تتكلمش مع حد
  ما تعرفوش :)\nOnly talk to your friends; don't talk to strangers."
from:
  name: سامح دعبس
  id: '2022490591345439'
type: status
created_time: '2018-03-01T20:04:16+0000'
updated_time: '2018-03-01T22:54:10+0000'
permalink_url: https://www.facebook.com/groups/egyptian.geeks/permalink/1768912146481819/
shares:
  count: 4
id: '172338516139198_1768912146481819'
reactions:
  data:
  - id: '10214297179999255'
    name: Ahmed Hassan
    type: LOVE
  - id: '10159847733870510'
    name: Mohammed Hashish
    type: LIKE
  - id: '10155121705651135'
    name: Ahmed Abul Khair
    type: LIKE
  - id: '10156301546469701'
    name: Amr ELsaqqa
    type: LIKE
  - id: '871016873079772'
    name: Marwan Ahmed
    type: LIKE
  - id: '1841969225821545'
    name: Ibrahim Abd-Elfadel
    type: LIKE
  - id: '10214609459461204'
    name: Mohamed Momen
    type: LIKE
  - id: '926707540818900'
    name: Ahmed Gamal
    type: LIKE
  - id: '10155341623494067'
    name: Ashraf Gomaa
    type: LIKE
  - id: '10155224155802344'
    name: Sameh Saeed
    type: LIKE
  - id: '10211042032353708'
    name: Islam Nazir
    type: LIKE
  - id: '1545710202131633'
    name: Ahmed Hamdy
    type: LIKE
  - id: '1874895892543707'
    name: محمد المهدى
    type: LIKE
  - id: '10216248300579505'
    name: Muhammad Nagy
    type: LIKE
  - id: '1874044245938978'
    name: Sherif Bakry
    type: LIKE
  - id: '10156085462929907'
    name: Mohamed Talaat Mahlies
    type: LIKE
  - id: '10155638836572182'
    name: Ahmed Yehia Emam
    type: LIKE
  - id: '1561453373962249'
    name: Ahmed Khalil
    type: LIKE
  - id: '1565630406892047'
    name: Ahmed Mohamed
    type: LIKE
  - id: '2009707695984456'
    name: Mahmoud Farouk
    type: LIKE
  - id: '1811551685586388'
    name: Ahmed Mudhar
    type: LIKE
  - id: '1620183618049194'
    name: Ahmed Taha
    type: LIKE
  - id: '1859829507362556'
    name: Hadeel Mohamed
    type: LIKE
  - id: '2029908667286506'
    name: Waheed Ibrahim
    type: LOVE
  - id: '10213275664117662'
    name: Ashraf Hamdy
    type: LIKE
  - id: '151416158878055'
    name: عبدالرحمن محمود
    type: LOVE
  - id: '10208531944855065'
    name: Shaimaa Hasan Derbaz
    type: LIKE
  - id: '10215433203563275'
    name: Mohamed Amgad
    type: LIKE
  - id: '10156350315693322'
    name: Ahmed Salah Mohamed
    type: LIKE
  - id: '2030697810535603'
    name: Wessam S-e
    type: LIKE
  - id: '1601577066590051'
    name: Ahmed Khalaf
    type: LIKE
  - id: '1585587958161025'
    name: Laila Al-Ashkar
    type: LIKE
  - id: '10212835320052720'
    name: Muhammad El Tarabely
    type: LIKE
  - id: '1809013739171097'
    name: Ahmed Ashraf
    type: LIKE
  - id: '10156227825683939'
    name: Mohammed Abdo
    type: LIKE
  - id: '1722658717785442'
    name: Abd El Rhaman Ezzat
    type: LIKE
  paging:
    cursors:
      before: TVRFd09EazBNVEF3TXpveE5USXdNREE1TmpFMU9qYzRPRFkwT0RBek56a3hNek14TWc9PQZDZD
      after: TVRBd01EQXhNak01T1RBMU56RXlPakUxTVRrNU16VXpNek02TWpVME1EazJNVFl4TXc9PQZDZD
comments:
  data:
  - created_time: '2018-03-01T21:00:46+0000'
    from:
      name: Ahmed Khalaf
      id: '1601577066590051'
    message: "جميل جداً \U0001F44D"
    id: '1769004899805877'
  - created_time: '2018-03-01T22:08:15+0000'
    from:
      name: Mohamed Selim
      id: '10159951096645711'
    message: تسلم ايدك يابشمهندس سامح، فيه سؤالين هنا. هل ال fluent api ممكن نثتثنيها
      من القاعده دي؟ الحاجه تانيه مش سؤال اوي بس اعتقد ال DDD فعليا حل هذا النوع من
      المشاكل
    id: '1769053129801054'
  - created_time: '2018-03-01T22:22:11+0000'
    from:
      name: Ahmed Mudhar
      id: '1811551685586388'
    message: رائع كالعادة ..استمر
    id: '1769063363133364'
  paging:
    cursors:
      before: WTI5dGJXVnVkRjlqZAFhKemIzSTZANVGMyT1RBd05EZAzVPVGd3TlRnM056b3hOVEU1T1RNNE1EUTMZD
      after: WTI5dGJXVnVkRjlqZAFhKemIzSTZANVGMyT1RBMk16TTJNekV6TXpNMk5Eb3hOVEU1T1RReU9UTXgZD
attachments:
  data:
  - description: "حبة software engineering  بالهجايص(7): قانون ديميتر Law of Demeter\n--------\n
      اتكلم مع أصحابك بس، ما تتكلمش مع حد ما تعرفوش.\n-- جميع الأمهات 3> \n\nكان فيه
      مشروع برمجي اسمه مشروع ديميتر، الناس اللي شغالة فيه عملوا بعض القواعد للمبرمجين
      اللي شغالين على المشروع عشان يكتبوا كود OOP نضيف، و بعدين لقوا إن القواعد دي
      ينفع تعمم فنشروها بالاسم ده = قانون ديميتر Law Of Demeter. وديميتر دي إلهة النبات
      والطبيعة عند الإغريق. وطبعا دول ناس كفار مالناش دعوة بيهم، ومايهمناش دلوقتي
      ليه سموه بالاسم ده. اللي يهمنا الفكرة اللي وراه.\n\n* إيه الفكرة؟ \nلما بييجوا
      يشرحوا الفكرة بالهجايص كده بيقولوا نفس الكلام اللي أمك كانت بتقوله لك وأنت صغير:
      اتكلم مع أصحابك بس، ما تتكلمش مع حد ما تعرفوش :)\nOnly talk to your friends;
      don't talk to strangers.\n\nلكن لما بييجوا يشرحوها كفنيين، بيشرحوها كالآتي:\nلما
      بيكون عندك method/function ما، مسموح للmethod دي إنها تنده لـ5 أنواع فقط من
      الmethods:\n1- أي method تانية معاها في نفس الclass\n2- لو الmethod دي داخل
      لها parameters، مسموح لها تنده لأي method في أي parameter من اللي داخلين لها\n3-
      لو الmethod دي أنشأت instantiates أي كائن object، مسموح لها تنده لأي method
      فيه\n4- لو فيه field/attribute في نفس الclass معاها، مسموح لها تنده للmethods
      اللي فيه\n5- لو فيه أي global object، تقدر تنده للmethods اللي فيه.\n\n* طيب
      إيه علاقة الشرح اللي بالهجايص بالشرح الفني؟\nبالهجايص: لو أنت رايح تقابل واحد
      صاحبك و لقيته جايب واحد صاحبه معاه، اتكلم مع صاحبك بس، وماتتكلمش مع صاحبه عشان
      أمك ما تزعلش منك!\nفي البرمجة: لو ندهت لmethod من اللي مسموح لك تنده لهم بحسب
      قانون ديميتر، فرجعت لك object، ما ينفعش تنده لأي method في الobject ده عشان
      اللي حطوا قانون ديميتر ما يزعلوش منك، يعني ما ينفعش تكتب كود زي كده:\nGetObjectA().GetObjectB().DoSomething();\nأو
      بعبارة أخرى:في اللغات اللي بتستخدم النقطة للوصول للبيانات fields/attributes
      \ أو العمليات methods/functions المسموحة على الobject، زي الjava و الC#، استخدم
      نقطة واحدة بس في الإجراء الواحد. use only one dot.\n\nأي مبرمج مصري فهلوي أصيل،
      هايقول لك خلاص، لو الكود اللي فات ده بيخالف القانون، احنا ممكن نكتبه على أكثر
      من سطر، كده مثلا:\nVar b = GetObjectA().GetObjectB();\nb.DoSomething();\nبس
      الحقيقة ده مخالف للقانون برضو، لأن الفكرة مش في تقليل عدد النقاط المستخدمة للوصول
      لتفاصيل الobjects، بل في تقليل الاعتمادية بين أجزاء البرنامج وتحسين الencapsulation،
      عشان كده هاتلاقي أي حاجة بتستخدم Fluent API (إنك تفضل تنده لmethods على نفس
      الobject) - زي jQuery مثلا - مش بتخالف القانون ده ولا حاجة.\nمثال من jQuery:\n$('<p></p>').html(\"Blah,
      blah, blah\").addClass(\"foobar\").appendTo(\"body\");\nليه المثال ده مش بيخالف
      قانون ديميتر؟ لأ كل function من دول بترجع this، وبالتالي الإجراء اللي فات ملتزم
      بالنوع الأول المسوح في القانون.\nونفس الكلام للناس اللي شغال LINQ، لما بكتب
      كود زي المثال التالي مش بخالف قانون ديميتر:\nemployees.Where(x => x.IsActive).Select(x
      => x.JoinDate).ToList();\n\n* مميزات تطبيق قانون ديميتر\nتطبيق القانون ده بيخلي
      البرنامج مرن وسهل التعديل،عشان بيقلل الاعتمادية بين أجزاء البرنامج. بل إن فيه
      دراسة اتعملت على الموضوع ده سنة 1996 وطلعوا بنتيجة إن تقليل تسلسل نده الmethods
      ممكن يؤدي إلى تقليل الأخطاء البرمجية bugs.\n\n* حالات استثنائية\n- الحقيقة كلمة
      \"قانون\" دي مش مهضومة قوي في البرمجة، لأنها تحمل معنى إني ما ينفعش أكسره، وده
      مش الواقع،  فمثلا لو طبقت القانون ده بحذافيره، هاتلاقي إنك عشان تفضل محافظ على
      استخدام نقطة واحدة في كل عملية، هاتضطر تعمل wrapper methods كتيرة، وده مش بس
      ممل وبيستهلك وقت، لأ ده بيزود احتمالية حدوث أخطاء برمجية بسبب كثرة الmethods
      اللي هاتكون في الclass (زي ما الدراسة اللي اتكلمنا عليها فوق قالت برضو).\n-
      فيه حالات تانية برضو بنبقى عاوزين \"نخالف\" القانون ده عن عمد مش نطبقه! زي ما
      قلنا فوق، المقصود من المبدأ ده تحسين الencapsulation، عن طريق إخفاء المعلومات،
      بس فيه حالات ببقى عاوز \"أظهر\" فيها المعلومات مش أخفيها، وبالتالي تطبيق القانون
      ده بيبقى مش مناسب، زي مثلا لما يكون عندي View Model متقسم لمجموعات من الobjects،
      ونفس الكلام في حالة إني باستخدم Data Transfer Object متقسم لمجموعات من الobjects،
      الشاهد هنا لما بيكون عندي data objects مافيهاش behavior كتير، القانون ده مش
      بيبقى مش مناسب قوي.\n- مثال ثالث لو هيكلية البيانات data structure مهمة بالنسبة
      لي، زي مثلا إني أكون بتعامل مع ملف إكسيل، وتقسيم البيانات في الملف (ورقة > جدول
      > حقل..إلخ) مهم بالنسبة لي لتسهيل الوصول للمعلومات وفهمها، ففي الحالة دي مخالفة
      القانون مافيهاش حاجة.\n- كمان مثال، زي ما قلنا إن هدفنا تقليل الاعتمادية و تحسين
      الencapsulation، بحيث إن لو حاجة اتغيرت ما اضطرش أغير في حاجات تانية، طيب لو
      الحاجات دي ما بتتغيرش؟ قشطة مفيش مشكلة من \"ترك\" الاعتمادية في الحالة دي ومخالفة
      القانون.\n\n* روح القانون\nالحقيقة الحالات الاستثنائية للقانون ده كثيرة، وعشان
      كده فيه ناس اعترضت على تسميته قانون، وفيه ناس اقترحت تغيير اسمه، زي مارتن فاولر
      Martin Fowler، اقترح تسميته: اقتراح ديميتر المفيد أحيانا  Occasionally Useful
      Suggestion of Demeter. بل إن فيه ناس قالت عليه مالوش أي تلاتة لازمة، زي ديفيد
      هانيمر هانسن David Heinemeier Hansson (اللي عمل Ruby On Rails)، قال بالنص:\nI
      think the Law of Demeter is shit and never follow it.\n بس خروجا من الخلاف،
      ممكن نستخدم الاسم الثاني - الأقل شهرة - للقانون ده: مبدأ المعرفة على قدر الحاجة
      Principle of least knowledge [محدش يقول لي الترجمة غلط، عشان أنا مترجمها بالمعنى
      مش ترجمة حرفية:)] وده حتى أكثر تعبيرا عن\"روح القانون\"، فمش لازم الobjects
      تعرف حاجات كتير بتفاصيل التفاصيل عن الobjects الثانية عشان تعرف تشتغل، إنما
      الأفضل إنها تعرف اللي هي محتاجاه بس.\n\n* إزاي نطبق القانون ده؟\nزي ما قلنا
      فوق، لو جيت تطبق القانون بحذافيره، هاتلاقي إنك بتعمل wrapper methods كتيرة،
      ودي حاجة مش ظريفة خالص، والحل هنا ممكن يكون إني أسأل السؤال التالي: هو ليه الobject
      ده عاوز يعرف تفاصيل الobjects التانية دي؟ ماذا لو طبقنا مبدأ  \"أؤمر، ما تسألش
      Tell, Don't Ask\" اللي اتكلمنا عنه الحلقة اللي فاتت؟ مش كده نبقى طبقنا القانون
      واستفدنا من \"روحه\"؟ فضلا اقرأوا المقالة، الرابط بتاعها في أول تعليق.\n\n*
      الالتزام بالقانون على مستوى الarchitecture\nفيه حالة واحدة تحضرني دلوقتي، أنا
      شايف إنه \"قانون\" ولازم ألتزم بيه مهما حصل، وهو على مستوى الarchitecture مش
      على مستوى الclasses، ففي حالة إنك مستخدم طبقات layers، كل طبقة مسموح لها تتعامل
      مع الطبقة اللي تحتها مباشرة بس، ومش مسموح إنها تتجاوز الطبقة اللي تحتها لطبقات
      أدنى، وده بيخلي الarchitecture بتاعك نظيف وسهل الصيانة نسبيا.\n\nماتنسوش تشيروا
      المقالة لو حسيتوا إنها مفيدة :)\n\nالمصادر اللي استفدت منها في أول تعليق."
    media:
      image:
        height: 225
        src: https://scontent.xx.fbcdn.net/v/t1.0-9/28472300_2038658809728617_3904869593761118877_n.jpg?oh=9b946f90a8ec62ba1c10e40f88b29e72&oe=5B3432E9
        width: 225
    target:
      url: https://www.facebook.com/photo.php?fbid=2038658809728617&set=p.2038658809728617&type=3
    type: photo
    url: https://www.facebook.com/photo.php?fbid=2038658809728617&set=p.2038658809728617&type=3
