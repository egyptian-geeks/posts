---
message: "Hi All, \n\nI wanted to share with you my latest open source project \"Khazna\".
  \n\nIt is a Parameter Store that uses Context-Based Authentication to grant access
  to sensitive parameters (e.g. DB passwords, AWS credentials, … ) only to the automated
  scripts intended to use them, so that these sensitive parameters are not accessible
  to an attacker that compromised the user account from which the scripts are being
  run.\n\nIf you are interested please check the summary below and let me know if
  you have any questions or suggestions.\n\n** Links:\n\nDocumentation: http://khazna.readthedocs.io/en/latest/index.html\n\nGetting
  Started: http://khazna.readthedocs.io/en/latest/getting_started.html (You can setup
  a working demo in ~15 minutes using an EC2 Amazon Linux instance, please let me
  know if you need assistance ).\n\nSource Code: https://github.com/mohamed-osama-aboelkheir/Khazna\n\n**
  What is Khazna?\nKhazna is a Parameter Store that uses Context-Based Authentication
  to grant access to sensitive parameters (e.g. DB passwords, AWS credentials, … )
  only to the automated scripts intended to use them, so that these sensitive parameters
  are not accessible to an attacker that compromised the user account from which the
  scripts are being run.\n\n** What is a Parameter Store?\nA parameter store is a
  server that is used to store sensitive parameters: (e.g. DB passwords, AWS credentials,
  … ) and provide these parameters to automated scripts during runtime.\n\n** What
  is Context-Based Authentication?\nAuthentication traditionally is the verification
  of the identity of a user or a host by a proof-of-identity such as a password or
  a key.\n\nContext-Based Authentication on the other hand takes into consideration
  other factors in the context of the request (e.g. Location, Time, Frequency, … )
  besides the proof of identity to verify whether the request originated from a valid
  host/user.\n\nFor a parameter store the request context may include factors such
  as:\n\n·         The script/application that will use the parameter.\n·         Whether
  it is being run through a local, cron or ssh session.\n·         If ssh is used
  from which IP did it originate.\n\n** What is the problem Khazna is trying to solve?\nFor
  non-automated scripts the user can be prompted for any needed sensitive parameters
  (e.g. DB passwords, AWS credentials) during runtime, or the user can pass it as
  an option and an environmental variable. However, for automated scripts running
  unattended this is not possible.\n\nHence, some developers sometimes hard-code the
  parameter in their scripts or in a configuration file (e.g. ~/.aws/credentials ).
  Of course, if an attacker is able to compromise the user account from which the
  script is being run he will be able to retrieve the parameter easily, making impact
  of the compromise even worse.\n\nOther local techniques like obfuscation, and encryption
  doesn’t add much security as if the script is able to reverse these techniques,
  the attacker will be able to do the same.\n\nAnother technique is using remote Parameter
  stores like AWS SSM Parameter Store or Chef Data bags to keep the parameters in
  encrypted form and only pass it to clients with certain permissions. This is better
  than keeping the parameters locally on all instances that run the automated script,
  but again if the user account running the script gets compromised the attacker can
  use the same commands in the script to retrieve the parameters.\n\nThe issue here
  lies in the fact the traditional parameter stores only authenticate WHO is requesting
  the parameter which may be the host or the user account on it. But this doesn’t
  provide enough information about whether the parameter is being used for WHAT it
  was intended for, which is the script(s) used for automation, rather than being
  requested by an attacker that compromised the account.\n\n** How Khazna solves this
  problem?\n\nKhazna uses context-based authentication to allow or deny access to
  sensitive data. This means that instead of just authenticating WHO is requesting
  the parameter (the user account running the automated script), it authenticates
  WHAT the parameter is going to be used for and HOW it is being run.\n\nThis means
  that you can create rules for the below use cases and many more:\n\n1.       Only
  pass the parameter to a certain script (verified by the hash).\n2.       Only pass
  the parameter if the script is invoked from an SSH session open from a certain IP.\n3.
  \      Only pass the parameter if the script is invoked from cron.\n4.       Only
  pass the parameter if the script is invoked from a non-interactive shell.\nFurther
  Reading\nHow Khazna works: http://khazna.readthedocs.io/en/latest/how_khazna_works.html\nSecurity
  Controls: http://khazna.readthedocs.io/en/latest/security_controls.html\nScreenshots:
  http://khazna.readthedocs.io/en/latest/screenshots.html"
link: https://www.facebook.com/photo.php?fbid=1591854830898696&set=gm.1752871034752597&type=3
from:
  name: Mohamed Abo El-Kheir
  id: '1578541785563334'
type: photo
picture: https://scontent.xx.fbcdn.net/v/t1.0-0/q83/s130x130/27858345_1591854830898696_8191675451152824259_n.jpg?oh=d0433d369a2eb3cfedfbac3e7a53c96f&oe=5B3AA509
created_time: '2018-02-14T08:38:29+0000'
updated_time: '2018-02-14T08:38:29+0000'
permalink_url: https://www.facebook.com/groups/egyptian.geeks/permalink/1752871034752597/
id: '172338516139198_1752871034752597'
reactions:
  data:
  - id: '871016873079772'
    name: Marwan Ahmed
    type: LIKE
  - id: '1615436418535535'
    name: Sabry ALzahar
    type: LIKE
  - id: '10155315827270686'
    name: Om Ar
    type: LIKE
  - id: '10159932941280506'
    name: Mohab Elkaref
    type: LIKE
  - id: '1964650613774365'
    name: Galal Aly
    type: LIKE
  - id: '2089769777911117'
    name: Ahmed Shaaban Mohamed
    type: LIKE
  - id: '10156266511868081'
    name: Ahmed Zain Mohammed
    type: LIKE
  paging:
    cursors:
      before: TVRBd01EQTFNVFEwTURJME5EWTRPakUxTVRnM09URXhNekk2TWpVME1EazJNVFl4TXc9PQZDZD
      after: TlRRd016UTRNRGd3T2pFMU1UZAzJNREF5T1RZANk1qVTBNRGsyTVRZAeE13PT0ZD
attachments:
  data:
  - description: "Hi All, \n\nI wanted to share with you my latest open source project
      \"Khazna\". \n\nIt is a Parameter Store that uses Context-Based Authentication
      to grant access to sensitive parameters (e.g. DB passwords, AWS credentials,
      … ) only to the automated scripts intended to use them, so that these sensitive
      parameters are not accessible to an attacker that compromised the user account
      from which the scripts are being run.\n\nIf you are interested please check
      the summary below and let me know if you have any questions or suggestions.\n\n**
      Links:\n\nDocumentation: http://khazna.readthedocs.io/en/latest/index.html\n\nGetting
      Started: http://khazna.readthedocs.io/en/latest/getting_started.html (You can
      setup a working demo in ~15 minutes using an EC2 Amazon Linux instance, please
      let me know if you need assistance ).\n\nSource Code: https://github.com/mohamed-osama-aboelkheir/Khazna\n\n**
      What is Khazna?\nKhazna is a Parameter Store that uses Context-Based Authentication
      to grant access to sensitive parameters (e.g. DB passwords, AWS credentials,
      … ) only to the automated scripts intended to use them, so that these sensitive
      parameters are not accessible to an attacker that compromised the user account
      from which the scripts are being run.\n\n** What is a Parameter Store?\nA parameter
      store is a server that is used to store sensitive parameters: (e.g. DB passwords,
      AWS credentials, … ) and provide these parameters to automated scripts during
      runtime.\n\n** What is Context-Based Authentication?\nAuthentication traditionally
      is the verification of the identity of a user or a host by a proof-of-identity
      such as a password or a key.\n\nContext-Based Authentication on the other hand
      takes into consideration other factors in the context of the request (e.g. Location,
      Time, Frequency, … ) besides the proof of identity to verify whether the request
      originated from a valid host/user.\n\nFor a parameter store the request context
      may include factors such as:\n\n·         The script/application that will use
      the parameter.\n·         Whether it is being run through a local, cron or ssh
      session.\n·         If ssh is used from which IP did it originate.\n\n** What
      is the problem Khazna is trying to solve?\nFor non-automated scripts the user
      can be prompted for any needed sensitive parameters (e.g. DB passwords, AWS
      credentials) during runtime, or the user can pass it as an option and an environmental
      variable. However, for automated scripts running unattended this is not possible.\n\nHence,
      some developers sometimes hard-code the parameter in their scripts or in a configuration
      file (e.g. ~/.aws/credentials ). Of course, if an attacker is able to compromise
      the user account from which the script is being run he will be able to retrieve
      the parameter easily, making impact of the compromise even worse.\n\nOther local
      techniques like obfuscation, and encryption doesn’t add much security as if
      the script is able to reverse these techniques, the attacker will be able to
      do the same.\n\nAnother technique is using remote Parameter stores like AWS
      SSM Parameter Store or Chef Data bags to keep the parameters in encrypted form
      and only pass it to clients with certain permissions. This is better than keeping
      the parameters locally on all instances that run the automated script, but again
      if the user account running the script gets compromised the attacker can use
      the same commands in the script to retrieve the parameters.\n\nThe issue here
      lies in the fact the traditional parameter stores only authenticate WHO is requesting
      the parameter which may be the host or the user account on it. But this doesn’t
      provide enough information about whether the parameter is being used for WHAT
      it was intended for, which is the script(s) used for automation, rather than
      being requested by an attacker that compromised the account.\n\n** How Khazna
      solves this problem?\n\nKhazna uses context-based authentication to allow or
      deny access to sensitive data. This means that instead of just authenticating
      WHO is requesting the parameter (the user account running the automated script),
      it authenticates WHAT the parameter is going to be used for and HOW it is being
      run.\n\nThis means that you can create rules for the below use cases and many
      more:\n\n1.       Only pass the parameter to a certain script (verified by the
      hash).\n2.       Only pass the parameter if the script is invoked from an SSH
      session open from a certain IP.\n3.       Only pass the parameter if the script
      is invoked from cron.\n4.       Only pass the parameter if the script is invoked
      from a non-interactive shell.\nFurther Reading\nHow Khazna works: http://khazna.readthedocs.io/en/latest/how_khazna_works.html\nSecurity
      Controls: http://khazna.readthedocs.io/en/latest/security_controls.html\nScreenshots:
      http://khazna.readthedocs.io/en/latest/screenshots.html"
    media:
      image:
        height: 120
        src: https://scontent.xx.fbcdn.net/v/t1.0-9/27858345_1591854830898696_8191675451152824259_n.jpg?oh=633da40ca9107866818e365587aa248d&oe=5B4E5D4B
        width: 456
    target:
      id: '1591854830898696'
      url: https://www.facebook.com/photo.php?fbid=1591854830898696&set=gm.1752871034752597&type=3
    type: photo
    url: https://www.facebook.com/photo.php?fbid=1591854830898696&set=gm.1752871034752597&type=3
