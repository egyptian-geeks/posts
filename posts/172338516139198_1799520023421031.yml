---
message: "حبة software engineering بالهجايص:(8) أنواع ودرجات التعلق/الاعتمادية\n----------------------\nلما
  جيت أرسم الخريطة بتاعت السلسلة دي لقيت إن فيه مقالة المفروض كانت تيجي بدري شوية
  عشان الدنيا تبقى ماشية بسلاسة أكتر، لكن معلش، كل تأخيرة وفيها خيرة. \nالمقالة دي
  المفروض تكون رقم (3) في السلسلة. المقالة رقم (2) كانت بعنوان \"أحط الحاجة فين\"
  [الرابط بتاعها في أول تعليق] اتكلمنا فيها عن مباديء لتقسيم البرنامج ووضع كل جزء
  في مكانه اللي المفروض يكون فيه. المقالة دي استكمال للموضوع بدرجات وأنواع التعلق
  أو الاعتمادية (dependency/coupling)، والخطة كانت إن كل مقالة تالية بتتعامل مع إشكالات
  درجة أو نوع من التعلق ده، ربنا ييسر ويعين."
from:
  name: سامح دعبس
  id: '2022490591345439'
type: status
created_time: '2018-03-29T20:39:49+0000'
updated_time: '2018-03-29T20:39:49+0000'
permalink_url: https://www.facebook.com/groups/egyptian.geeks/permalink/1799520023421031/
shares:
  count: 10
id: '172338516139198_1799520023421031'
reactions:
  data:
  - id: '2005333593078956'
    name: Ali Mohamed
    type: LIKE
  - id: '10156085462929907'
    name: Mohamed Talaat Mahlies
    type: LIKE
  - id: '821575244710628'
    name: Amr Sa'eed
    type: LIKE
  - id: '10155224155802344'
    name: Sameh Saeed
    type: LIKE
  - id: '10210922196510789'
    name: Shaza Ismail
    type: LIKE
  - id: '10155293228608733'
    name: Mohamed Nady
    type: LIKE
  - id: '1722658717785442'
    name: Abd El Rhaman Ezzat
    type: LOVE
  - id: '578536342490916'
    name: Pegade Shaheen
    type: LIKE
  - id: '10159847733870510'
    name: Mohammed Hashish
    type: LIKE
  - id: '10155928509950915'
    name: Ali Hasan
    type: LIKE
  - id: '939098632915712'
    name: Mahmoud Amin
    type: LOVE
  paging:
    cursors:
      before: TVRBd01EQTRNRGN3TURNM05USXhPakUxTWpJME1UTTFNak02TWpVME1EazJNVFl4TXc9PQZDZD
      after: TVRBd01EQTBORFkzTlRJMU9UZAzVPakUxTWpJek5UWTFPRGs2TnpnNE5qUTRNRE0zT1RFek16RXkZD
attachments:
  data:
  - description: "حبة software engineering بالهجايص:(8) أنواع ودرجات التعلق/الاعتمادية\n----------------------\nتَعَلَّقَ
      رُوحِي رُوحَها قَبْلَ خَلْقِنا *** ومن بعدما كُنَّا نِطافاً وفي المهدِ\nفَزَادَ
      كما زِدْنا فأصْبَحَ نامِياً *** فَلَيْسَ وإنْ مُتْنَا بِمُنْفَصِمِ العَهْدِ\nوَلَكِنَّهُ
      باقٍ على كُلِّ حادثٍ *** وَزَائِرُنَا في ظُلْمَةِ القَبْرِ واللَّحْدِ\n-- قيس
      لبنى (جميل بن معمر)\n\n* مقدمة\nلما جيت أرسم الخريطة بتاعت السلسلة دي لقيت إن
      فيه مقالة المفروض كانت تيجي بدري شوية عشان الدنيا تبقى ماشية بسلاسة أكتر، لكن
      معلش، كل تأخيرة وفيها خيرة. \nالمقالة دي المفروض تكون رقم (3) في السلسلة. المقالة
      رقم (2) كانت بعنوان \"أحط الحاجة فين\" [الرابط بتاعها في أول تعليق] اتكلمنا
      فيها عن مباديء لتقسيم البرنامج ووضع كل جزء في مكانه اللي المفروض يكون فيه. المقالة
      دي استكمال للموضوع بدرجات وأنواع التعلق أو الاعتمادية (dependency/coupling)،
      والخطة كانت إن كل مقالة تالية بتتعامل مع إشكالات درجة أو نوع من التعلق ده، ربنا
      ييسر ويعين.\n\n* درجات الاعتمادية في الUML\nفي البرمجة بأسلوب الكائنات ( Object
      Oriented Programming)، فيه عندنا درجات للاعتمادية/التعلق (dependency/coupling)،
      وكل ما تكون الدرجة أقل يكون أفضل. هاعتمد على مسميات الUML في التقسيمة دي للتسهيل
      (لو مش عارف يعني إيه UML مش مهم، ده مش هايؤثر إن شاء الله على فهم الكلام اللي
      جاي)، مع ملاحظة إن مفيش إجماع على التقسيمة دي وكل واحدة معناها إيه، لكن أنا
      هاتكلم من وجهة نظري الشخصية:\n- أقل درجة من درجات الاعتمادية هي التبعية (Dependency).
      ودي بتيجي في صورة إن فيه method في object بتستقبل    object من نوع تاني كparameter
      أو بترجع object من نوع تاني. وفيما بين استقبال الobject أو إرجاعه، بيتم استخدام
      البيانات والعمليات العامة (public interfaces) اللي في الobject التاني ده لإنجاز
      المهمة المطلوبة. هنا الاعتمادية في حدها الأدنى لأن الobject الأول مش محتاج يعرف
      حاجة عن الobject التاني إلا البيانات و العمليات العامة بس (only public (interfaces،
      ولفترة مؤقتة بس، هي فترة تنفيذ الmethod. وبالتالي التغييرات في شكل (signature)
      الحاجات العامة دي بس هو اللي هايؤدي إن الclass بتاعتي ممكن تتغير. ممكن نقول
      العلاقة بين الclasses هنا إن واحدة بتستخدم( uses) التانية. عاوز أؤكد هنا تاني
      إن الاعتمادية مؤقتة داخل الmethod اللي بتتعامل مع الobject اللي من نوع class
      تانية، أول ما الmethod بتخلص، الاعتمادية دي بتروح. \n- الدرجة اللي أعلى من كده
      هي الإلحاق(association)، ودي نفس فكرة التبعية (dependency) بس بدل ما يكون الobject
      داخل للmethod أو خارج منها، بيكون field/attribute في الclass، وبالتالي مسموح
      لكل الmethods اللي في الclass دي إنها تتعامل معاه. تظل الاعتمادية هنا على ال
      public interfaces اللي في الclass التانية، يعني مش هاتأثر إلا لو شكل الحاجات
      العامة (signature of public interfaces )اتغيرت. نقدر برضو نقول إن العلاقة بين
      الclasses هنا إن واحدة بتستخدم ( uses) التانية. لكن الفرق الأساسي هنا إن الاعتمادية
      ما بقيتش مؤقتة زي الدرجة الأولى، لأن أي method في الclass ممكن تتعامل مع الobject،
      وبالتالي الاعتمادية مستمرة طول ما الobject المستفيد صاحي، وبناء عليه: أي تغيير
      هايكون تأثيره أكبر، لأنه قد يحتاج لتغيير في أماكن أكثر.\n- الدرجة الأعلى هي
      التجميع أو التركيب (composition)، ودي نفس فكرة الإلحاق (association) بس بيزيد
      عليها التحكم في حياة الobjects، يعني الobject بيشاور على object من نوع تاني
      (أو معاه reference منه يعني)، وفي نفس الوقت الobject الأولاني هو اللي أنشأ الobject
      التاني (عمل له instantiation يعني، أو بالبلدي عمل له new) وهو اللي بيموته أو
      بيتخلص منه (يعني بالبلدي كده هو اللي عمل له delete أو dispose)، يعني العلاقة
      هنا مسألة حياة أو موت (death relationship).\n- أعلى درجة تعلق أو اعتمادية هي
      في حالة الوراثة (Inheritance)، والاعتمادية هنا برضو مسألة حياة أو موت زي الحالة
      السابقة، بس بيزيد عليها أن الclasses الوارثة (derived classes) بتكون عارفة تفاصيل
      التنفيذ و البيانات المحمية في الclass الموروثة (base class). ودي اتكلمنا عنها
      بالتفصيل في المقالة رقم (3) اللي كانت بعنوان تفكيك التعلق/الاعتمادية (breaking
      dependencies) [الرابط بتاعها في أول تعليق]، فمش هانعيد الكلام عليها تاني هنا.\n\n*
      أبعاد أخرى تؤثر في الاعتمادية\nفيه أبعاد تانية بتؤثر على درجة التعلق أو الاعتمادية
      برضو، ومنها:\n- هل العلاقة ذات اتجاه واحد ولا اتجاهين؟ الاعتمادية الأقل لما
      تكون العلاقة ذات اتجاه واحد، يعني فيه object من نوع class  معينة شايل object
      من نوع class تانية وبيسخدم البيانات والعمليات العامة بتاعته. الاعتمادية الأعلى
      لما تكون العلاقة ذات اتجاهين، يعني عندي اتنين objects من نوعين مختلفين، وكل
      واحد شايل reference على الobject التاني وبيستخدم البيانات والعمليات العامة بتاعته.\n-
      فيه عندنا برضو الاعتمادية المتعلقة بالوقت temporal coupling، ودي معناها إن في
      الوضع الطبيعي البرنامج بتاعك شغال على التوالي، بيتنفذ سطر ورا التاني، و لا يتم
      الانتقال للسطر التالي إلى بعد انتهاء السطر السابق، فلو سطر معين كان مثلا بيروح
      يجيب حاجة من قاعدة البيانات، فالبرنامج مضطر يستناه وما يعملش أي حاجة تانية لغاية
      لما السطر ده يخلص. فهنا يظهر تأثير وقت التنفيذ الmethods على اللي بينده لها.\n-
      فيه أنواع تانية من الاعتمادية أكثر وضوحا، وعشان كده مش هاتكون ضمن نطاق السلسلة
      دي، زي مثلا لما بيكون عندي حاجة مشتركة، أي تغيير فيها هايؤثر على كل الحاجات
      اللي معتمدة عليها،زي مثلا لما يكون عندي بيانات مشتركة، قاعدة بيانات مشتركة،
      تنسيق مشترك (shared format) لتبادل المعلومات...إلخ.\n\n* الخطة\nاللي هايحصل
      بعد كده في السلسلة دي -إن شاء الله - إني هاتكلم عن إشكالات كل نوع أو درجة من
      الحاجات اللي قلناها فوق دي و إزاي نتعامل معاها عشان نطلع برنامج نظيف. و فيه
      مفاجئة المقالة القادمة إن شاء الله، إننا هانبدأ نتكلم عن أنماط التصميم (Design
      Patterns) بالهجايص عشان نحل شوية من الإشكالات دي، فابقوا معنا.\n\nفضلا لا أمرا،
      انشروا المقالة دي لو حسيتوا إنها مفيدة."
    media:
      image:
        height: 168
        src: https://scontent.xx.fbcdn.net/v/t1.0-9/29598199_2052502691677562_2311483918458030677_n.jpg?_nc_cat=0&oh=78779b675b929832b90667152f07c716&oe=5B2A333C
        width: 300
    target:
      url: https://www.facebook.com/photo.php?fbid=2052502691677562&set=p.2052502691677562&type=3
    type: photo
    url: https://www.facebook.com/photo.php?fbid=2052502691677562&set=p.2052502691677562&type=3
