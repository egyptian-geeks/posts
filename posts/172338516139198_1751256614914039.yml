---
message: "حبة software engineering بالهجايص (6): أؤمر، ما تسألش Tell, Don't Ask\n------------\nفي
  عصر ما قبل الObject Oriented Programming، البرامج كانت بتتقسم بحيث إن البيانات بتبقى
  في حتة و العمليات اللي بتعالج البيانات دي في حتة تانية خالص. الOOP قالت لك لأ احنا
  هانرتب الدنيا بطريقة مختلفة، احنا نحطهم الاتنين مع بعض، وسموا الحركة دي (اللي هي
  جمع البيانات مع العمليات) encapsulation (الترجمة الحرفية ليها = تغليف، تضمين). \nلما
  بحط البيانات و العمليات مع بعض بزود في التماسك cohesion لأن العمليات مرتبطة بالبيانات
  اللي موجودة معاها بالفعل، ودي حاجة كويسة. و لما بفصلهم بزود في الاقتران coupling
  لأن الclass اللي فيها العمليات هاتحتاج تعتمد على الclass اللي فيها البيانات، و دي
  حاجة وحشة. [اتكلمت عن الموضوع ده بالتفصيل في مقالة: أحط الحاجة فين، الرابط بتاعها
  في أول تعليق]\n\nعارفين الناس اللي بيدخلوا على الجروبات ويقولوا لو حد يعرف كذا يقول،
  و عادة الناس بترد عليه وتقول له: قول سؤالك على طول. اللي بيعرف هايرد عليك. وفيه
  جروبات بتمنع النوع ده من المشاركات من الأساس.\nأهم هما دول اللي مش بيطبقوا الencapsulation
  كويس :D"
from:
  name: سامح دعبس
  id: '2022490591345439'
type: status
created_time: '2018-02-12T20:01:49+0000'
updated_time: '2018-02-13T21:05:55+0000'
permalink_url: https://www.facebook.com/groups/egyptian.geeks/permalink/1751256614914039/
shares:
  count: 4
id: '172338516139198_1751256614914039'
reactions:
  data:
  - id: '1515946401836401'
    name: Mohammed Essehemy
    type: LIKE
  - id: '871016873079772'
    name: Marwan Ahmed
    type: LIKE
  - id: '10155065423406363'
    name: Sayed Moawad
    type: LIKE
  - id: '1979848165376268'
    name: مصطفى يحيي
    type: LIKE
  - id: '10159847733870510'
    name: Mohammed Hashish
    type: LIKE
  - id: '10155907304990540'
    name: Moustafa Mansour
    type: LIKE
  - id: '10156020325916241'
    name: Musa Hamza
    type: HAHA
  - id: '627907956'
    name: Emad Elsaid
    type: LIKE
  - id: '1926152114064385'
    name: Mohamed Abd Elnaeem
    type: LIKE
  - id: '1587359294686403'
    name: Mohamed Ibrahim
    type: LIKE
  - id: '10160329792615179'
    name: Omda Emad
    type: LIKE
  - id: '1574530695959412'
    name: Mohamed A. Othman
    type: LIKE
  - id: '607394942930229'
    name: Ahmed Abd El-Hameed
    type: LIKE
  - id: '1874044245938978'
    name: Sherif Bakry
    type: LIKE
  - id: '10214458339193134'
    name: Mohamed Galal
    type: LIKE
  - id: '10155295014392371'
    name: Ehab Hosny
    type: LIKE
  - id: '1826024707472018'
    name: Ahmed AboRahma
    type: LIKE
  - id: '10155724562968855'
    name: عبدالله ممدوح المرسي
    type: LIKE
  - id: '1982749008405448'
    name: Ahmed Basheir
    type: LIKE
  - id: '10211837909289309'
    name: Mohamed Hussein
    type: LIKE
  - id: '936984383128098'
    name: Omar Hafez
    type: LIKE
  - id: '10159911272580223'
    name: Ibrahim Adel
    type: LIKE
  - id: '999826596836080'
    name: Mohammed Salah
    type: LIKE
  - id: '1765781893453545'
    name: Hawary
    type: LIKE
  - id: '1572533649506768'
    name: Kh Airy
    type: LIKE
  - id: '1019655408173893'
    name: Ahmed Mohamed
    type: LIKE
  - id: '10155926704141777'
    name: Ahmed Abdelaziz
    type: LIKE
  - id: '10211091168020519'
    name: Mohammed Attya
    type: LIKE
  - id: '1811551685586388'
    name: Ahmed Mudhar
    type: LIKE
  - id: '10156129652479747'
    name: Radwa Kamal
    type: LIKE
  - id: '10208727810672580'
    name: Ahmed Kamal
    type: LIKE
  - id: '547020688991281'
    name: Muhammad Kamal
    type: LIKE
  - id: '10159976784510596'
    name: Islam Abdelaziz
    type: LIKE
  - id: '10155826343095272'
    name: Mahmoud Moustafa
    type: LIKE
  - id: '10214177798774740'
    name: Ibrahim Nafea
    type: LIKE
  paging:
    cursors:
      before: TVRBd01EQXlOak14TmpjME56TXpPakUxTVRnNE1ERTVORFU2TWpVME1EazJNVFl4TXc9PQZDZD
      after: TVRFd056RTJORE16T1RveE5URTRORFkxTnpNNU9qSTFOREE1TmpFMk1UTT0ZD
comments:
  data:
  - created_time: '2018-02-13T21:05:51+0000'
    from:
      name: Ahmed Abdelaziz
      id: '10159632868215538'
    message: Ahmed Sameh Abdelrahman Ahmed Amr Awni
    id: '1752406868132347'
  paging:
    cursors:
      before: WTI5dGJXVnVkRjlqZAFhKemIzSTZANVGMxTWpRd05qZAzJPREV6TWpNME56b3hOVEU0TlRVMU9UVXkZD
      after: WTI5dGJXVnVkRjlqZAFhKemIzSTZANVGMxTWpRd05qZAzJPREV6TWpNME56b3hOVEU0TlRVMU9UVXkZD
attachments:
  data:
  - description: "حبة software engineering بالهجايص (6): أؤمر، ما تسألش Tell, Don't
      Ask\n------------\nفي عصر ما قبل الObject Oriented Programming، البرامج كانت
      بتتقسم بحيث إن البيانات بتبقى في حتة و العمليات اللي بتعالج البيانات دي في حتة
      تانية خالص. الOOP قالت لك لأ احنا هانرتب الدنيا بطريقة مختلفة، احنا نحطهم الاتنين
      مع بعض، وسموا الحركة دي  (اللي هي جمع البيانات مع العمليات) encapsulation (الترجمة
      الحرفية ليها = تغليف، تضمين). \nلما بحط البيانات و العمليات مع بعض بزود في التماسك
      cohesion لأن العمليات مرتبطة بالبيانات اللي موجودة معاها بالفعل، ودي حاجة كويسة.
      و لما بفصلهم بزود في الاقتران coupling لأن الclass اللي فيها العمليات هاتحتاج
      تعتمد على الclass اللي فيها البيانات، و دي حاجة وحشة. [اتكلمت عن الموضوع ده
      بالتفصيل في مقالة: أحط الحاجة فين، الرابط بتاعها في أول تعليق]\n\nعارفين الناس
      اللي بيدخلوا على الجروبات ويقولوا لو حد يعرف كذا يقول، و عادة الناس بترد عليه
      وتقول له: قول سؤالك على طول. اللي بيعرف هايرد عليك. وفيه جروبات بتمنع النوع
      ده من المشاركات من الأساس.\nأهم هما دول اللي مش بيطبقوا الencapsulation كويس
      :D\nتعالوا نشوف القصة إيه...\n\nفيه مبدأ عندنا بيقول: ما تسألش عن البيانات،
      وبعدين تقرر أنت هاتعمل بيها إيه. خلي المسئول عن تنفيذ اللي أنت عاوز تعمله بالبيانات
      دي هي الclass نفسها اللي فيها البيانات دي. و قل للclass دي تجيب من الآخر وتنفذ
      اللي أنت عاوزه على طول.المبدأ ده بيسموه Tell, Don't Ask. يعني إيه الكلام ده؟\n-
      تعالوا ناخد مثال من ال.NET Framework، فيه class اسمها File دي بنستخدمها لما
      نيجي نتعامل مع الملفات على الهارد ديسك، الclass دي فيها method اسمها Exists.
      ودي بنستخدمها عشان نتأكد الملف موجود ولا لأ قبل ما نعمل عليه أي عمليات (قراءةRead
      أو كتابة Write  أو حذف Delete) و إلا هايضرب Exception لو جيت اعمل العمليات دي
      على ملف مش موجود مثلا. بس لو ندهت للExists عشان أشوف الملف موجود ولا لأ قبل
      ما اعمل عليه أي عملية هاخالف المبدأ اللي معانا: Tell, Don't Ask، عشان أنا سألت
      الأول عن حالة الملف وبعدين أخدت القرار بناء على الحالة اللي عرفتها.\n- تعالوا
      نشوف مثال تاني من ال.NET Framework برضو: لما تيجي تحول نص string لرقم، فيه عندك
      method في الint struct اسمها Parse و دي هاتضرب exception لو النص لا يمكن تحويله
      لرقم، يعني هاينطبق عليها نفس الكلام اللي قلناه في المثال اللي فات عند التعامل
      مع الملفات. بس الحقيقة الstruct دي فيها method تانية اسمها TryParse ودي \"بتحاول\"
      تحول النص لرقم، لو فشلت مش بتضرب exception. ودي متسقة جدا مع المبدأ اللي بنتكلم
      عليه، ومش محتاج هنا try-catch عشان أتفادى مشاكل فشل التحويل.\nتعالوا نرجع للمثال
      الأول: لو كانت الFile class فيها methods اسمها: TryRead، TryDelete، TryWrite،
      مش هايكون أفضل؟\nأظن هايكون أفضل.\n- المبدأ ده مفيد جدا لما تيجي تصمم خدمة ويب
      web service. الفكرة إنك عاوز تقلل المشاوير اللي ما بينك و بين الخدمة عشان تتفادى
      مشاكل الشبكة. فلما تطبق المبدأ ده هاتلاقي إنك بتطلب من الخدمة تنفذ لك المهمة
      اللي أنت عاوزها دوغري، ودي بيسموها  coarse grained service، على عكس لو فضلت
      رايح جاي على الخدمة تسأل عن البيانات و بعدين تقرر و بعد كده بترجع تعيط إن الخدمة
      بطيئة. و دي بيسموها  fine grained service أو chatty service.\n\nالمبدأ ده كويس
      جدا، بس أحيانا مش بيكون مناسب للسياق اللي أنا شغال فيه، أو لو طبقته هاضيع على
      نفسي مميزات أخرى، تعالوا نشوف أمثلة:\n- تعالوا نرجع لأول مثال ذكرته فوق، لغاية
      لما مايكروسوفت تعمل TryDelete، استخدم Exists الأول وبعدين Delete و لا أحط الDelete
      \ في try-catch؟\nلأ طبعا استخدم الExists وبعدين الDelete، و لا تستخدم الtry-catch
      في التحكم في مسارات البرنامج control flow أبدا. هنا مش أنا اللي عامل الFile
      class و مضطر استخدمها كما هي، وده مش عيب.\n- لما بعمل بحث أو تصفية لبيانات أنا
      بسأل مش بأمر، بس قشطة مفيش مشكلة في كده.\n- لو حطيت كل العمليات الممكنة و الغير
      ممكنة على البيانات هالاقي الدنيا كبرت جدا، و معظم استخدامات الclass اللي فيها
      البيانات و العمليات دي مش بتحتاج كل العمليات دي. في الحالة دي ممكن يبقى عندي
      طبقات من الclasses، كل طبقة بتعمل تجريد abstraction للطبقة اللي تحتها و تضيف
      عمليات جديدة عليها (أو غيرها من طرق تقسيم الclasses)\n- أحيانا بفصل العمليات
      عن البيانات لأن العمليات دي ممكن تتغير، ودي هاتيجي معانا بالتفصيل إن شاء الله
      لما نتكلم على المبدأ Encapsulate what varies أو عند تطبيق ال strategy pattern.\n-
      أحيانا بفصل العمليات عن البيانات عشان أقسم الدنيا لطبقات layers فتديني مرونة
      أعلى في التصميم، زي مثلا إني بفصل العمليات اللي بتتعامل مباشرة مع قاعدة البيانات
      (اللي هي CRUD Operations = إنشاء Create وقراءة Retrieve وتعديل Update وحذف Delete
      البيانات) عن العمليات اللي بتعالج البيانات دي، وتطبق عليها إجراءات العمل business
      rules مثلا.\n- أحيانا بنفضل إننا نفصل العمليات الاستعلامية Queries (زي التقارير
      و لوحات المعلومات dashboards مثلا) عن العمليات الإجرائية Commands (زي إنشاء
      و تعديل وحذف البيانات) عشان نقدر نحسن كل واحدة على حدة، وفيه architecture style
      معروف في التقسيمة دي اسمه Command and Query Responsibility Segregation، أو اختصارا
      CQRS.\n\nحابب أختم المقالة دي بكلمة لعم الأركتكتس، مارتن فاولر Martin Fowler،
      قال: التصميم الجيد عبارة عن شوية موازنات، وجمع البيانات مع العمليات يعتبر عامل
      واحد فقط نأخذه في حسباننا بجانب العوامل الأخرى.\nGood design is all about trade-offs,
      and co-locating data and behavior is just one factor to bear in mind.\n\nيا
      ريت تنشروا المقالة دي لو حسيتوا إنها مفيدة، أو تقولولي إيه اللي ماعجبكمش فيها
      في التعليقات عشان أحسن من نفسي في المقالات اللي جاية إن شاء الله :)\n\nملاحظة:
      الصورة من مقالة لمارتن فاولر استفدت منها برضو في كاتبة المقالة دي، و الرابط
      بتاعها في أول تعليق."
    media:
      image:
        height: 720
        src: https://scontent.xx.fbcdn.net/v/t1.0-9/s720x720/27868116_2030253023902529_8504300613682867007_n.jpg?oh=51bb9403e3257622d4b7f4132c28956f&oe=5B37A603
        width: 615
    target:
      url: https://www.facebook.com/photo.php?fbid=2030253023902529&set=p.2030253023902529&type=3
    type: photo
    url: https://www.facebook.com/photo.php?fbid=2030253023902529&set=p.2030253023902529&type=3
