---
message: "web.ts\nCreate Web Apps the Object Oriented way.\nAn Easier, Faster, and
  Efficient way to create websites with MVC architecture.\n\nIntroduction\nweb.ts
  is designed to make web design easier by using Object Oriented programing where
  is there separation between Views(HTML/CSS) and Controller(.ts classes) in Typescript
  to create native OO and asynchronous(AJAX) apps. Views are designed using Interactive
  Web Design softwares such as Visual Studio WebForm Designer and the Controllers
  are Typescript classes of Page, List, and View.\n\nWeb Developers are facing problems
  while designing websites. Javascript and HTML/CSS are all mixed together without
  structure or organization. With web.ts, there is separation between Views and Controllers,
  also Models to achieve MVC, which is best recommended type of architecture. You
  will not need to learn any new techniques or languages for as Typescript is merely
  Javascript with OO added(Future JS), and the library is simple and easy to follow.\n\nObject
  Classes(Components)\n* For pages, you create a ts class file that extends web.ts.Page.
  You fetch a and prepare document using view() implement and populate using render()
  implement. view() is called once for the class and all Subclasses. Process are started
  after Instantiation. \n\n* For lists, it extends Page class; create a ts class that
  extends web.ts.List<T>.  You fetch a document from view() implement and populate
  (add() Implement each item individually), remove() and set(). Process are started
  after Instantiation(arr:T) if View() is not empty or null, else use list() or set()
  method.\n\n* For Views, it extends Page class; create a ts class that extends web.ts.View<T>.
  \ You fetch a document from view() implement and populate using apply(item:T, doc:?Document).
  Every time apply(item:T) is called, it preforms the action. Process are started
  after Instantiation(item:T) if View() is not empty or null, else use apply() method.\n\n*
  Use switch(hash) cases of main() method in web.ts to start the process for specific
  Page or List or View object on a specific hash name so pages are loaded when a Url
  change is detected and load different pages based on the name of the Hash. links(a
  element) with \"web\" css class will continue to work even if \"onhashchange\" event
  isn't supported as pages will reload automatically when this happens. Use Interactive
  Web Design tool for HTML/CSS such as Visual Studio WebForm design mode to design
  the view. The View can be an element on the document or a seperate html file document
  that can be fetched.\n\n-Pages\n1. Implement the view() Method to prepare document
  and return the location of the view page you would like to show, for example, \"/Page1.txt\".\nYou
  can also return #element (id of an element) which could be hidden using \"web ts\"
  class, which returns the outerHTML content removing \" ts\" class of an element
  in the document page. The view source file can be designed with Interactive HTML
  Designer softwares such as the free Viusal Studio WebForm design.\nYou can use the
  view() Method to prepare the document before render(), it will be used once internally.\n\n2.
  Implement the render(document) method callback which is used to render the content
  when it's already available.\n\n3. Create instance of this and it starts automatically.\n\n-Lists\n1.
  Implement the add() and remove() Method to be used in adding or removing items.
  And implement view() method to return the document that will be used in rendering.\nList
  class uses load() and render(), in addition to view() of the page extension internally
  and the methods behave the same as Page class.\n\n2. Create an Instance of and it(arr:T[]).
  Process are started after Instantiation(item:T) if View() is not empty or null,
  else use list()/set() method.\n\n-Views\n1. Implement the apply(item:T,doc:?Document)
  Method to apply the action with item on doc. And implement view() method to return
  the document that will be used in rendering or not if you want to use the current
  document as the template.\n\n2. Create an Instance of and it(arr:T[]). Process are
  started after Instantiation(item:T) if View() is not empty or null, else use apply()
  method.\n\n[Open Source Project Website Link](https://github.com/medozs/web.ts)\n\n[Gif
  Tutorial](https://github.com/medozs/web.ts/blob/master/example.gif)"
link: https://github.com/medozs/web.ts
from:
  name: Ahmed Saleh
  id: '1707137612683071'
type: link
picture: https://external.xx.fbcdn.net/safe_image.php?d=AQDHpf8Fkfeis7pq&w=130&h=130&url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F16297164%3Fv%3D3%26s%3D400&cfs=1&_nc_hash=AQDpLvYEtyXLirTe
created_time: '2015-12-21T15:03:26+0000'
updated_time: '2015-12-21T15:03:26+0000'
name: medozs/web.ts
permalink_url: https://www.facebook.com/groups/egyptian.geeks/permalink/1049141575125550/
id: '172338516139198_1049141575125550'
attachments:
  data:
  - description: web.ts - Create Web Apps the Object Oriented way
    media:
      image:
        height: 420
        src: https://external.xx.fbcdn.net/safe_image.php?d=AQCungTpmPqmMr-4&w=720&h=720&url=https%3A%2F%2Favatars2.githubusercontent.com%2Fu%2F16297164%3Fv%3D3%26s%3D400&cfs=1&_nc_hash=AQDZv2lle_pQOeQl
        width: 420
    target:
      url: https://l.facebook.com/l.php?u=https%3A%2F%2Fgithub.com%2Fmedozs%2Fweb.ts&h=ATNGFdX2zwIJ12OR2bv9HMDUYpVPmUrmV1UcxPahOdsJx4m1zQcFDCdluXEnzrumR-s_GWvJmV7tf5x41D3Cmt2aicawWR3CNkbN-0-kyFeq0yTNyzpsgEbqYmF2C6km68tqfdVYI---ko2B&s=1
    title: medozs/web.ts
    type: share
    url: https://l.facebook.com/l.php?u=https%3A%2F%2Fgithub.com%2Fmedozs%2Fweb.ts&h=ATNGFdX2zwIJ12OR2bv9HMDUYpVPmUrmV1UcxPahOdsJx4m1zQcFDCdluXEnzrumR-s_GWvJmV7tf5x41D3Cmt2aicawWR3CNkbN-0-kyFeq0yTNyzpsgEbqYmF2C6km68tqfdVYI---ko2B&s=1
