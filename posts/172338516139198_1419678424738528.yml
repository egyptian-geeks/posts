---
message: |-
  #Javascript #Scopes #Closures #NestedFunctions
  I tried but couldn't solve this problem on my own:

  Create a function sum that will work like that: sum(a)(b) = a+b and accepts any number of brackets.

  For instance:
  sum(1)(2) == 3
  sum(5)(-1)(2) == 6
  sum(6)(-1)(-2)(-3) == 0
  sum(0)(1)(2)(3)(4)(5) == 15
from:
  name: Osama Soliman
  id: '879271768900112'
type: status
created_time: '2017-03-13T20:46:39+0000'
updated_time: '2017-03-15T05:48:31+0000'
permalink_url: https://www.facebook.com/groups/egyptian.geeks/permalink/1419678424738528/
id: '172338516139198_1419678424738528'
reactions:
  data:
  - id: '1545491685565248'
    name: Monzer Alsadeg
    type: LIKE
  - id: '1955441501387657'
    name: Bassam Abd Elhamid
    type: LIKE
  - id: '10208596993002679'
    name: Mostafa Alaa
    type: LIKE
  - id: '1984058555247376'
    name: Tarekk Mohamed Abdalla
    type: WOW
  - id: '10155780527142535'
    name: Ahmed Eldosoukey
    type: LIKE
  - id: '10156301546469701'
    name: Amr ELsaqqa
    type: LIKE
  paging:
    cursors:
      before: TVRBd01EQXpNVE15T1RRNU5qa3hPakUwT0RrMU1EY3lOalk2TWpVME1EazJNVFl4TXc9PQZDZD
      after: TlRZAMU56RTBOekF3T2pFME9EazBOREF4TXpVNk1qVTBNRGsyTVRZAeE13PT0ZD
comments:
  data:
  - created_time: '2017-03-13T20:57:29+0000'
    from:
      name: Omar Beshary
      id: '10208412458988343'
    message: ليه متعديش علي كل char في string , تتاكد من إنه numeric و تجمعه مع counter
      بعد لما تجيب قيمته ؟
    id: '1419684488071255'
  - created_time: '2017-03-13T21:03:15+0000'
    from:
      name: Bassam Abd Elhamid
      id: '1955441501387657'
    message: |-
      I am about to make it... :)

      function sum(x){if(x==undefined || x==0) return 0; else return x+window['sum'].call(this,x);}
    id: '1419687868070917'
  - created_time: '2017-03-13T21:03:29+0000'
    from:
      name: Amr ELsaqqa
      id: '10156301546469701'
    message: "طبعا انا عارف الاجابة ايدي بتاكلني اكتبها \U0001F601 \nبس هي لسة مش
      مفهومة بغض النظر عن ان الواحد يعرف يكتبها بنفسه من اول مرة؟ Osama Soliman"
    id: '1419687974737573'
  - created_time: '2017-03-13T21:05:41+0000'
    from:
      name: Abdelmawla Mohamed
      id: '10155529060497804'
    message: Maybe nested functions + override to string
    id: '1419689231404114'
  - created_time: '2017-03-13T21:15:48+0000'
    from:
      name: Mohamed Amin
      id: '2016714868586746'
    message: This is a plain currying example, do you want an answer or is it some
      sort of a quiz? :)
    id: '1419695948070109'
  - created_time: '2017-03-13T21:19:25+0000'
    from:
      name: Ibrahem Amin
      id: '10157052765627598'
    message: you need to override toString or valueOf of the returned function and
      let the interpreter do it's magic of returned the value of the returned function...
      the old currying with the variadic function hack
    id: '1419698424736528'
  - created_time: '2017-03-13T21:23:11+0000'
    from:
      name: Ibrahem Amin
      id: '10157052765627598'
    message: "to simplify the hack you just need to consider the following function\nfunction
      x(){ \nfunction y(){}; \ny.valueOf = function(){ return 'hi'};\nreturn y;\n}"
    id: '1419700564736314'
  - created_time: '2017-03-13T21:35:15+0000'
    from:
      name: Naggar
      id: '2069499223273223'
    message: trying...
    id: '1419707384735632'
  - created_time: '2017-03-13T21:35:24+0000'
    from:
      name: Osama Soliman
      id: '879271768900112'
    message: و فعلاً الclosures اصعب حاجه في Javascript ؟
    id: '1419707501402287'
  - created_time: '2017-03-13T22:10:42+0000'
    from:
      name: Naggar
      id: '2069499223273223'
    message: i don't know .. I am really curious to know if there's a way to solve
      it without the final empty () to invoke its tail to return the sum???
    id: '1419726948067009'
  - created_time: '2017-03-13T22:48:57+0000'
    from:
      name: Osama Soliman
      id: '879271768900112'
    message: Am I going to sleep for the second day without understanding closures
      properly?
    id: '1419748778064826'
  - created_time: '2017-03-13T23:35:20+0000'
    from:
      name: Ibraheem Osama
      id: '10155206310513093'
    message: "I'll explain closures but not this example as someone already solved
      it.\nClosures happens when a function remember its lexical scope (Where it was
      declared). this happens when you're declaring a function inside a scope and
      this function is using a variable from this scope, so what would happens when
      you're calling this function outside this scope, will this function remember
      the variable that it is using that was declared in the original scope and no
      longer exist in the current scope ? the answer is closures (Yes) coding example\n\nfunction
      foo(){\n\tvar bar=\"bar\";\n\tfunction baz() {\n\tconsole.log(bar);\n\t}\n\tbam(baz);\n}\n\nfunction
      bam(func)\n{\n\tfunc();\n}\n\nfoo();\n\nWhat happens here is that you're calling
      foo which calls bam and bam call the function passed to it which is baz and
      baz is using a variable that is called bar :( but the final call of baz is happened
      within bam  right ! does the variable bar exist in the scope of bam ?? no, so
      it shouldn't work because the variable not exist in this scope !! but it works
      (because of closures) throw remembering the scope it was declared which is function
      foo that has the variable bar ;) \nSo if you declared a function that is using
      a variable from the bigger scope and you used this function in another scope
      it will remember the old scope variable.\nThe next question what happens if
      the old scope variable changed will the function get the updated value or the
      old value ? the updated variable throw keeping track of the reference. so does
      it affect the GC ;) ?? you have to answer this question if you understood"
    id: '1419772268062477'
  - created_time: '2017-03-14T13:21:28+0000'
    from:
      name: Hassan Aly Selim
      id: '10156089336182292'
    message: |-
      I understood the concept of Closures when I looked at what the C# Compiler does when I create a lambda expression that accesses local variables (same concept as nested functions in JS).
      The c# compiler actually generates a class (with a weird name) that holds references to all the local variables you're accessing in your lambda, along with the lambda itself in the form of a normal method. It's basically a context object.
      I actually wrote a blog post about how lambdas in C# work, one of the very few posts in my blog :D
    id: '1420215911351446'
  - created_time: '2017-03-14T14:47:30+0000'
    from:
      name: Ibraheem Osama
      id: '10155206310513093'
    message: |-
      Naggar why not :) try this code
      function foo(){
      var bar={a:1};
      function baz() {
      console.log(bar);
      }
      function baz1() {
      bar={b:2};
      }

      bam(baz);
      bam(baz1);
      bam(baz);
      return "end"
      }

      function bam(func)
      {
      func();
      }

      foo();

      By the way object in js is a reference type
    id: '1420267398012964'
  - created_time: '2017-03-14T15:07:22+0000'
    from:
      name: Ahmed Mansy
      id: '10215979763073379'
    message: |-
      It is a popular interview question, check this video
      https://www.youtube.com/watch?v=hRJrp17WnOE
    id: '1420280414678329'
  paging:
    cursors:
      before: WTI5dGJXVnVkRjlqZAFhKemIzSTZANVFF4T1RZANE5EUTRPREEzTVRJMU5Ub3hORGc1TkRNNE5qUTUZD
      after: WTI5dGJXVnVkRjlqZAFhKemIzSTZANVFF5TURJNE1EUXhORFkzT0RNeU9Ub3hORGc1TlRBME1EUTAZD
